{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","event","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","tweet","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","class","faTrash","faPencilAlt","TweetFactory","userObj","setTweet","attachment","setAttachment","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","data","marginTop","Navigation","display","justifyContent","to","margiRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","getMyTweet","where","orderBy","get","updateProfile","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","from","App","init","setInit","currentUser","setIsLoggedIn","userObject","setUserObject","onAuthStateChanged","user","args","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.698e06b6.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBg0hPYEK6DM7roObrG-N9raHQTi-yHktU\",\r\n  authDomain: \"twitter-18cc6.firebaseapp.com\",\r\n  projectId: \"twitter-18cc6\",\r\n  storageBucket: \"twitter-18cc6.appspot.com\",\r\n  messagingSenderId: \"715865745869\",\r\n  appId: \"1:715865745869:web:293bca02cdc5c3eec33c84\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\n\r\nexport const dbService = firebase.firestore();\r\n\r\nexport const storageService = firebase.storage();","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () =>{\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error,setError] = useState(\"\");\r\n    const onChange = e =>{\r\n        const {target:{name,value}} = e;\r\n        if(name === \"email\"){\r\n            setEmail(e.target.value);\r\n        }else if(name === \"password\") {\r\n            setPassword(e.target.value);\r\n        }\r\n    }\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                //create account\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            }else{\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n        }catch(error){\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setNewAccount((prev) =>!prev);\r\n    return(\r\n    <>\r\n        <form onSubmit = {onSubmit} className=\"container\">\r\n            <input name = \"email\" type=\"text\" placeholder = \"Email\" required value = {email}  onChange={onChange} className=\"authInput\"/>\r\n            <input name = \"password\" type=\"password\" placeholder = \"Password\" required value={password} onChange={onChange} className=\"authInput\"/>\r\n            <input type=\"submit\" value={newAccount ? \"Create Account\" : \"Log In\"} className=\"authInput authSubmit\"/>\r\n            {error && <span className=\"authError\">{error}</span>}\r\n        </form>\r\n        <span onClick={toggleAccount} className=\"authSwitch\">{newAccount ?\"Log In\":\"Create Account\"}</span>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default AuthForm;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {authService,firebaseInstance} from \"fbase\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\nconst Auth = () =>{\r\n\r\n    const onSocialClick = async(event) =>{\r\n        const {target:{name}} = event;\r\n        let provider;\r\n        if(name === \"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        }else if(name===\"github\"){\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        await authService.signInWithPopup(provider);\r\n    }\r\nreturn (\r\n    <div className=\"authContainer\">\r\n    <FontAwesomeIcon\r\n      icon={faTwitter}\r\n      color={\"#04AAFF\"}\r\n      size=\"3x\"\r\n      style={{ marginBottom: 30 }}\r\n    />\r\n        <AuthForm />\r\n        <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} /></button>\r\n          <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} /></button>\r\n        </div>\r\n    </div>\r\n)\r\n}\r\nexport default Auth;\r\n","import React, {useState} from \"react\";\r\nimport { dbService, storageService } from 'fbase';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faTrash, faPencilAlt} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Tweet = ({tweetObj, isOwner}) =>  {\r\n    const [editing, setEditing] = useState(false);\r\n    const [newTweet, setNewTweet] = useState(tweetObj.tweet);\r\n    const onDeleteClick = async() => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\r\n        if(ok){\r\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n            await storageService.refFromURL(tweetObj.attachmentUrl).delete();\r\n        }\r\n    };\r\n    const toggleEditing = () =>setEditing((prev) => !prev);\r\n    const onSubmit = async(e) => {\r\n        e.preventDefault();\r\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n            tweet:newTweet,\r\n        });\r\n        setEditing(false);\r\n    }\r\n    const onChange = (e) =>{\r\n        const {target:{value}} = e;\r\n        setNewTweet(value);\r\n    }\r\n    return(\r\n        <div className=\"tweet\">\r\n            {\r\n                editing ? (\r\n                    <>\r\n                    <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n                        <input onChange = {onChange}type = \"text\" placeholder = \"Edit\" value={newTweet} required autoFocus className=\"formInput\"/>\r\n                        <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\"/>\r\n                    </form>\r\n                    <button onClick={toggleEditing} className=\"formBtn cancelBtn\">Cancel</button>\r\n                    </>\r\n                    ) : \r\n                <>\r\n                    <h4>{tweetObj.tweet}</h4>\r\n                    {tweetObj.attachmentUrl && <img src={tweetObj.attachmentUrl}/>}\r\n                    {isOwner && (\r\n                    <div class=\"tweet_actions\">\r\n                        <span onClick={onDeleteClick}>\r\n                            <FontAwesomeIcon icon={faTrash} />\r\n                        </span>\r\n                        <span onClick={toggleEditing}>\r\n                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                        </span>\r\n                    </div>\r\n            )}\r\n            </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tweet;","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst TweetFactory = ({userObj}) =>{\r\n    const [tweet, setTweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\") \r\n    const onSubmit = async(event) =>{\r\n        if(tweet===\"\"){\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\";\r\n        if(attachment !== \"\"){\r\n            const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await fileRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n        const tweetObj = {\r\n            tweet : tweet,\r\n            createdAt : Date.now(),\r\n            creatorId : userObj.uid,\r\n            attachmentUrl,\r\n        }\r\n        await dbService.collection(\"tweets\").add(tweetObj);\r\n        setTweet(\"\");\r\n        setAttachment(\"\");\r\n    }\r\n    const onChange = (event) =>{\r\n        const{target:{value}}  = event;\r\n        setTweet(value);\r\n    };\r\n    const onFileChange = (event) =>{\r\n         const{target:{files}} = event;\r\n         const theFile = files[0];\r\n         const reader = new FileReader();\r\n         reader.onloadend = (finishedEvent) => {\r\n            const {currentTarget:{result}} = finishedEvent;\r\n            setAttachment(result);\r\n         }\r\n         reader.readAsDataURL(theFile);\r\n    }\r\n    const onClearAttachment = () => setAttachment(\"\");\r\n    return(\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={tweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n        <input  \r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }} />\r\n            {attachment && (\r\n            <div className=\"factoryForm__attachment\">\r\n            <img\r\n              src={attachment}\r\n              style={{\r\n                backgroundImage: attachment,\r\n              }}\r\n            />\r\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n              <span>Remove</span>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n            </div> )}\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default TweetFactory;","import React,{ useEffect, useState }  from \"react\";\r\nimport { dbService, storageService } from './../fbase';\r\nimport Tweet from './../components/Tweet';\r\nimport TweetFactory from \"components/TweetFactory\";\r\n\r\nconst Home = ({userObj}) =>{\r\n    const [tweets, setTweets] = useState([]);\r\n\r\n    useEffect(() =>{\r\n        dbService.collection(\"tweets\").onSnapshot((snapshot) =>{\r\n    const tweetArray = snapshot.docs.map(doc=>({id:doc.id, ...doc.data()}));\r\n            setTweets(tweetArray);\r\n        })\r\n    },[])\r\n    \r\n    return(\r\n    <div className=\"container\">\r\n    <TweetFactory userObj={userObj} />        \r\n        <div style={{marginTop:30}}>\r\n            {tweets.map((tweet) => \r\n            (<Tweet key={tweet.id} tweetObj = {tweet} isOwner={tweet.creatorId===userObj.uid} />\r\n                ))}\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({userObj}) =>\r\n(\r\n<nav>\r\n    <ul style={{display:\"flex\", justifyContent:\"center\", marginTop:50}}>\r\n        <li><Link to=\"/\" style={{margiRight:10}}>\r\n            <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\"/>\r\n        </Link></li>\r\n        <li><Link\r\n          to=\"/profile\"\r\n          style={{\r\n            marginLeft: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}의 Profile`\r\n              : \"Profile\"}\r\n          </span>\r\n        </Link>\r\n        </li>\r\n    </ul>\r\n</nav>\r\n);\r\nexport default Navigation;","import React, { useEffect, useState } from \"react\";\r\nimport { authService, dbService } from 'fbase';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Profile = ({refreshUser, userObj}) =>{\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    };\r\n    const getMyTweet = async() =>{\r\n        const tweets = await dbService.collection(\"tweets\").where(\"creatorID\",\"==\",userObj.uid).orderBy(\"creatorAt\").get(); \r\n        //필터링하는 방법\r\n        //orderby를 만드려면 index 생성해야함.\r\n        //tweets.docs.map(doc => doc.data());\r\n    }\r\n    const onChange = (e) =>{\r\n        const{\r\n            target:{value}\r\n        } = e;\r\n        setNewDisplayName(value);\r\n    }\r\n    const onSubmit = async(e) =>{\r\n        e.preventDefault();\r\n        if(userObj.displayName !==newDisplayName){\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName,\r\n            })\r\n        };\r\n        refreshUser();\r\n    }\r\n    useEffect(() =>{\r\n        getMyTweet();\r\n    },[])\r\n    return(\r\n        <div className=\"container\">\r\n        <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input onChange = {onChange} type=\"text\" autoFocus placeholder=\"Display name\" value = {newDisplayName}\r\n        className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}/>\r\n    </form>\r\n    <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n        )\r\n}\r\nexport default Profile;","import React, {useState} from \"react\";\r\nimport {HashRouter as Router, Redirect, Route, Switch} from \"react-router-dom\"\r\nimport Auth from './../routes/Auth';\r\nimport Home from './../routes/Home';\r\nimport Navigation from './Navigation';\r\nimport Profile from './../routes/Profile';\r\n\r\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) => {\r\n    return(\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn? ( \r\n                <div\r\n                style={{\r\n                  maxWidth: 890,\r\n                  width: \"100%\",\r\n                  margin: \"0 auto\",\r\n                  marginTop: 80,\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <Route exact path = \"/\">\r\n                   <Home userObj={userObj}/> \r\n                </Route>\r\n                <Route exact path = \"/profile\">\r\n                   <Profile userObj={userObj} refreshUser = {refreshUser}/> \r\n                </Route>\r\n                </div>\r\n                ): (\r\n                    <>\r\n                    <Route exact path=\"/\">\r\n                        <Auth />\r\n                    </Route>\r\n                    <Redirect from=\"*\" to=\"/\"/>\r\n                    </> \r\n                    )}\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","import AppRouter from \"components/Router\"\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {authService} from \"fbase\";\r\n\r\nfunction App() {\r\n  const [init, setInit] = useState(false); //init이 false이면 router 숨김.\r\n  const [isLoggedIn, setIsLoggedIn] = useState(authService.currentUser);\r\n  const [userObject, setUserObject] = useState(null);\r\n  useEffect(() =>{\r\n    authService.onAuthStateChanged((user) => {\r\n      if(user){\r\n        setIsLoggedIn(true);\r\n        setUserObject({\r\n          displayName:user.displayName,\r\n          uid:user.uid,\r\n          updateProfile: (args) => user.updateProfile(args),\r\n        });\r\n      } else{\r\n        setUserObject(null);\r\n        //setIsLoggedIn(false);\r\n      }\r\n      setInit(true);\r\n      });\r\n    }, []);\r\n    const refreshUser = () => {\r\n      const user = authService.currentUser;\r\n      setUserObject({\r\n        displayName:user.displayName,\r\n        uid:user.uid,\r\n        updateProfile: (args) => user.updateProfile(args),\r\n      }); \r\n    }   \r\n    return (\r\n      <>\r\n        {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={isLoggedIn} userObj={userObject}/> : \"Initializing...\"}\r\n        <footer>&copy; {new Date().getFullYear()} Nwitter</footer>\r\n      </>\r\n    );\r\n  }\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport \"./styles.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}